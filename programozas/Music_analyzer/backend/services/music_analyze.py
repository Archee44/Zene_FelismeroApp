import os
import re
import sys
import json
import base64
import time
import requests
import librosa
from mutagen.mp3 import MP3
from mutagen.id3 import ID3
from flask import jsonify
from dotenv import load_dotenv
from backend.services.camelot import detect_camelot

# Bet√∂ltj√ºk a .env f√°jlt (Spotify kulcsokhoz)
load_dotenv()

upload_folder = "./uploads"
spotify_token_cache = {"token": None, "expires": 0}

# -------------------------------------------
# SEG√âDF√úGGV√âNYEK
# -------------------------------------------

def cleaned_title(title: str) -> str:
    """Tiszt√≠tja a f√°jlneveket √©s c√≠meket a zavar√≥ kieg√©sz√≠t√©sekt≈ël."""
    title = re.sub(r"[\(\[].*?[\)\]]", "", title)
    title = re.sub(r"\b(official music video|official video|music video|video clip|audio|hq|id\d{3,}|v\d+|mp3|flac|mp3juices\.cc|mp3j\.cc|y2mate\.com|soundcloud rip|youtube download)\b", "", title, flags=re.IGNORECASE)
    title = title.replace("_", " ")
    title = re.sub(r"\s+", " ", title)
    return title.strip()


# -------------------------------------------
# SPOTIFY TOKEN KEZEL√âS
# -------------------------------------------

def get_spotify_token():
    """Spotify token lek√©r√©se a client credentials flow seg√≠ts√©g√©vel."""
    client_id = os.getenv("SPOTIFY_CLIENT_ID")
    client_secret = os.getenv("SPOTIFY_CLIENT_SECRET")
    if not client_id or not client_secret:
        raise Exception("Spotify client ID/secret missing in .env file!")

    auth_str = f"{client_id}:{client_secret}"
    b64_auth_str = base64.b64encode(auth_str.encode()).decode()

    headers = {
        "Authorization": f"Basic {b64_auth_str}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {"grant_type": "client_credentials"}

    resp = requests.post("https://accounts.spotify.com/api/token", headers=headers, data=data)
    resp.raise_for_status()
    return resp.json()["access_token"]


def get_spotify_token_cached():
    """Token cache ‚Äì ne k√©rj√ºnk √∫j tokent minden f√°jlhoz."""
    if spotify_token_cache["token"] and spotify_token_cache["expires"] > time.time():
        return spotify_token_cache["token"]

    token = get_spotify_token()
    spotify_token_cache["token"] = token
    spotify_token_cache["expires"] = time.time() + 3500  # ~58 perc
    return token


# -------------------------------------------
# SPOTIFY KERES√âS √âS AUDIO FEATURE LEK√âR√âS
# -------------------------------------------

def search_spotify_track(title, artist, token):
    """K√©tl√©pcs≈ës keres√©s ‚Äì pontos √©s √°ltal√°nos."""
    headers = {"Authorization": f"Bearer {token}"}
    base_url = "https://api.spotify.com/v1/search"

    # 1Ô∏è‚É£ Pr√≥b√°ljuk pontos keres√©ssel
    params = {"q": f"track:{title} artist:{artist}", "type": "track", "limit": 1}
    resp = requests.get(base_url, headers=headers, params=params)
    if resp.status_code == 200:
        items = resp.json().get("tracks", {}).get("items", [])
        if items:
            return items[0]["id"]


    # 2Ô∏è‚É£ Ha nem tal√°l, pr√≥b√°ljunk laz√°bb keres√©st
    params = {"q": f"{artist} {title}", "type": "track", "limit": 1}
    resp = requests.get(base_url, headers=headers, params=params)
    if resp.status_code == 200:
        items = resp.json().get("tracks", {}).get("items", [])
        if items:
            return items[0]["id"]

    print(f"‚ö†Ô∏è Spotify nem tal√°lt tal√°latot: {artist} - {title}")
    return None


def get_spotify_audio_features(track_id, token):
    """Spotify audio jellemz≈ëk lek√©r√©se."""
    url = f"https://api.spotify.com/v1/audio-features/{track_id}"
    headers = {"Authorization": f"Bearer {token}"}
    resp = requests.get(url, headers=headers)
    if resp.status_code == 200:
        return resp.json()
    print("‚ö†Ô∏è Spotify feature lek√©r√©s sikertelen:", resp.status_code, resp.text)
    print(f"üéß Spotify track ID lek√©rve: {track_id}")
    return None


# -------------------------------------------
# ZENE ANAL√çZIS
# -------------------------------------------

def analyze_music(file_path: str, user_token=None):
    """Librosa + Spotify alap√∫ elemz√©s.

    If a user OAuth access token is provided, use it; otherwise fall back
    to app client-credentials token.
    """
    try:
        y, sr = librosa.load(file_path, sr=None)
    except Exception as e:
        print("Librosa hiba:", str(e))
        raise

    duration = librosa.get_duration(y=y, sr=sr)
    tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
    bpm = int(round(float(tempo))) if isinstance(tempo, (int, float)) else int(round(float(tempo[0])))
    rms = float(librosa.feature.rms(y=y).mean())
    camelot = detect_camelot(y, sr)

    artist = "Unknown Artist"
    genre = "Unknown Genre"
    title = "Unknown Title"

    # Metaadat olvas√°s
    try:
        audio = MP3(file_path, ID3=ID3)
        artist_tag = audio.get("TPE1")
        genre_tag = audio.get("TCON")
        title_tag = audio.get("TIT2")

        if artist_tag and artist_tag.text:
            artist = artist_tag.text[0]
        if genre_tag and genre_tag.text:
            genre = genre_tag.text[0]
        if title_tag and title_tag.text:
            title = cleaned_title(title_tag.text[0])
    except Exception as e:
        print("Metadata hiba:", str(e))

    # Ha hi√°nyzik az el≈ëad√≥/c√≠m, pr√≥b√°ljuk a f√°jln√©vb≈ël
    if artist == "Unknown Artist" or title == "Unknown Title":
        filename = os.path.basename(file_path).replace(".mp3", "")
        parts = filename.split("-")
        if len(parts) >= 2:
            if artist == "Unknown Artist":
                artist = parts[0].strip().replace("_", " ")
            if title == "Unknown Title":
                title = cleaned_title(parts[1].strip().replace("_", " "))

    # -------------------------------------------
    # Spotify integr√°ci√≥
    # -------------------------------------------
    # Prefer the user's OAuth access token if provided; otherwise use app token
    spotify_token = user_token or get_spotify_token_cached()
    spotify_features = {}
    track_id = None

    if spotify_token:
        track_id = search_spotify_track(title, artist, spotify_token)
        if track_id:
            spotify_features = get_spotify_audio_features(track_id, spotify_token) or {}

    # -------------------------------------------
    # Eredm√©ny √∂ssze√°ll√≠t√°s
    # -------------------------------------------
    return {
        "title": title,
        "artist": artist,
        "genre": genre,
        "duration": float(duration),
        "bpm": bpm,
        "rms": rms,
        "camelot": camelot,

        # Spotify jellemz≈ëk, ha vannak:
        "danceability": spotify_features.get("danceability"),
        "energy": spotify_features.get("energy"),
        "valence": spotify_features.get("valence"),
        "acousticness": spotify_features.get("acousticness"),
        "instrumentalness": spotify_features.get("instrumentalness"),
        "liveness": spotify_features.get("liveness"),
        "speechiness": spotify_features.get("speechiness"),
        "spotify_tempo": spotify_features.get("tempo"),
        "spotify_key": spotify_features.get("key"),
        "mode": spotify_features.get("mode"),
        "time_signature": spotify_features.get("time_signature"),
        "spotify_track_id": track_id
    }


# -------------------------------------------
# PARANCSORI FUTTAT√ÅS TESZTEL√âSHEZ
# -------------------------------------------
if __name__ == "__main__":
    file_path = sys.argv[1]
    result = analyze_music(file_path)
    print(json.dumps(result, indent=2, ensure_ascii=False))
